#–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—Ç—Ä–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–ø3
#Change the order
import telebot
import os
from startCom import *
from InlineQue import *
from procfunc import *
#from testing import *

bot = telebot.TeleBot('1071045217:AAEb_yL_Rq6RrYeiryTrcYKliNX7osIQOrI') #bot tokem
storChanId = -1001298194112 #id of storage chanel

#uses for force reply
markup = telebot.types.ForceReply(selective=False)

keyboard1 = telebot.types.ReplyKeyboardMarkup()
keyboard1.row('–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å', "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å")

@bot.message_handler(commands=['start'])
def startM(message):
    start_message(message, bot, keyboard1)

@bot.message_handler(commands=['test1'])
def testM(message):
    send_default(message, bot)

@bot.message_handler(content_types=['text'])
def send_text(message):
    print(message)

    #name the new audio track
    if userJsonCheck(message.chat.id, "newAudioN") == True:
        userNameTrack(message)
        bot.reply_to(message, "–í–∞—à–∞ –∑–≤—É–∫–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, —Å–ø–∞—Å–∏–±–æ üòò", reply_markup=keyboard1)

    #delete an audio
    elif message.text == '–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å':
        if checkDelPos(message):
            keyboardDelete = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, row_width=2)
            for buttonAudio in userAudioList(message):
                keyboardDelete.add(buttonAudio)
            userJsonArgument(message.chat.id, "delAudioN")
            bot.reply_to(message, "–ö–∞–∫—É—é –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ —É–¥–∞–ª–∏—Ç—å?", reply_markup=keyboardDelete)
        else:
            bot.reply_to(message, "–í—ã –∏ —Ç–∞–∫ —É–∂–µ –≤—Å—ë —É–¥–∞–ª–∏–ª–∏, —Ö–≤–∞—Ç–∏—Ç...", reply_markup=keyboard1)
    elif userJsonCheck(message.chat.id, "delAudioN") == True:
        userDeleteAudio(message)
        bot.reply_to(message, "–î–∞–Ω–Ω–∞—è –∞—É–¥–∏–æ –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞", reply_markup=keyboard1)

    #rename an audio step 1
    elif message.text == '–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å':
        if checkDelPos(message):
            keyboardRename = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, row_width=2)
            for buttonAudio in userAudioList(message):
                keyboardRename.add(buttonAudio)
            userJsonArgument(message.chat.id, "renamAudioN")
            bot.reply_to(message, "–ö–∞–∫—É—é –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å?", reply_markup=keyboardRename)
        else:
            bot.reply_to(message, "–ê –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∏ –Ω–µ—á–µ–≥–æ...", reply_markup=keyboard1)
    #step 2, record which audio to rename, also check if audio exist
    elif (userJsonCheck(message.chat.id, "renamAudioN") and not(userJsonCheck(message.chat.id, "renamAudioName"))):
        print("step 2")
        if checkAudioExist(message):
             userJsonArgument(message.chat.id, "renamAudioN", renamName = getAudioNumberbyName(message))
             userJsonArgument(message.chat.id, "renamAudioName")
             bot.reply_to(message, "–ö–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–º –∫–∞–∂–µ—Ç—Å—è –ª—É—á—à–µ –ø–æ–¥–æ–π–¥–µ—Ç?")
        else:
            bot.reply_to(message, "–ü—Ä–æ—Å—Ç–∏—Ç–µ, —Ç–∞–∫–æ–≥–æ –∞—É–¥–∏–æ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
    #step 3 to rename
    elif (userJsonCheck(message.chat.id, "renamAudioN") and userJsonCheck(message.chat.id, "renamAudioName")):
        print("step 3")
        userRenameAudio(message)
        bot.reply_to(message, "–ê—É–¥–∏–æ –∑–∞–ø–∏—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞!", reply_markup=keyboard1)

    #if message doesnt make sence
    else:
        bot.send_message(message.chat.id, '–Ø –Ω–µ –ø–æ–Ω—è–ª, —á—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É', reply_markup=keyboard1)

#Forward the recorded voice to storage and create a record in json
@bot.message_handler(content_types=['voice'])
def function_name(message):
    print(message)

    if not (checkMaxAud(message)):
        bot.forward_message(storChanId, message.chat.id, message.message_id)
        userJsonArgument(message.chat.id, "newAudioN")
        addFileToJson(message)

        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–æ–≤–∏—Ç–µ –≤–∞—à—É –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –º–∞–∫—Å–∏–º—É–º –∞—É–¥–∏–æ, —É–¥–∞–ª–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å', reply_markup=keyboard1)

#Forward the audio file to storage
@bot.message_handler(content_types=['audio'])
def creating_new_file(message):
    print(message)
    bot.reply_to(message, "–ü—Ä–æ—Å—Ç–∏—Ç–µ, –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")

#Inline handler, the inline function in InlineQue.py
@bot.inline_handler(func=lambda query: True)
def query_text(inline_query):
    inline_que(inline_query, bot)

bot.polling()
